module GraphSetSucc

(** A graph is represented by a pair ([vertices], [successor])
{h
<ul>
<li> <code>vertices</code> : this constant is the fset of graph vertices
<li> <code>successor</code> : this function gives for each vertex the fset of vertices directly joinable from it
</ul>
*)

 (* use export fset.Fset *)
  use map.Map
  use set.SetImp 
  
  type vertex

  
  val eq_vertex (x y: vertex) : bool
    ensures { result <-> x = y }

  constant vertices: fset vertex
  constant infty : int = cardinal vertices

  function successors vertex : fset vertex

  axiom successors_vertices:
    forall x. mem x vertices -> subset (successors x) vertices

  predicate edge (x y: vertex) = mem x vertices /\ mem y (successors x)

  clone export graph.Path with type vertex = vertex, predicate edge = edge

  predicate reachable (x z: vertex) =
    exists l. path x l z

  lemma reachable_refl:
    forall x. reachable x x

  lemma reachable_trans:
    forall x y z. reachable x y -> reachable y z -> reachable x z

  lemma reachable_em:
    forall x y. reachable x y \/ not reachable x y

  predicate in_same_scc (x z: vertex)  =
    reachable x z /\ reachable z x

  predicate is_subscc (s: fset vertex) = 
    forall x z. mem x s -> mem z s -> in_same_scc x z

  predicate is_scc (s: fset vertex) =
    is_subscc s /\ (forall s'. subset s s' -> is_subscc s' -> s == s')

  predicate no_black_to_white (blacks grays: fset vertex) =
    forall x x'. edge x x' -> mem x blacks -> mem x' (union blacks grays)

  predicate access_from (x: vertex) (s: fset vertex) =
    forall y. mem y s -> reachable x y

end
